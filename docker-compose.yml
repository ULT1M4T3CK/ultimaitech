version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ultimaitech-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ultimaitech_portfolio
      POSTGRES_USER: ultimaitech_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_db_password_here}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    networks:
      - ultimaitech-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ultimaitech_user -d ultimaitech_portfolio"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ultimaitech-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5002
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ultimaitech_portfolio
      DB_USER: ultimaitech_user
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_db_password_here}
      JWT_SECRET: ${JWT_SECRET:-your_strong_jwt_secret_here}
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000,https://ultimaitech.com,https://www.ultimaitech.com}
      TRUST_PROXY: "true"
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      UPLOAD_DIR: uploads
      MAX_FILE_SIZE: 10485760
      SESSION_SECRET: ${SESSION_SECRET:-your_session_secret_here}
      LOG_LEVEL: info
      LOG_FILE: /app/logs/app.log
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - ./backend/.env:/app/.env:ro
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ultimaitech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
    container_name: ultimaitech-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      VITE_API_URL: ${VITE_API_URL:-http://localhost:5002}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - ultimaitech-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ultimaitech-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ultimaitech-network

volumes:
  postgres_data:
    driver: local

networks:
  ultimaitech-network:
    driver: bridge
